openapi: 3.0.0
info:
  title: Social network API Gateway
  version: 1.0.0
  description: API for routing requests between clients and servesies

paths:
  /register:
    post:
      summary: Register a new user
      description: Create a new user account with provided login credentials and email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The username for the new account
                password:
                  type: string
                  format: password
                  description: The password for the new account
                email:
                  type: string
                  format: email
                  description: The email address for the new account
              required:
                - username
                - password
                - email
      responses:
        '200':
          $ref: '#/components/responses/AuthSuccess'
        '400':
          description: Bad request
        '500':
          description: Internal error
        '409':
          description: Username or email already exists

  /update:
    put:
      summary: Update user profile data
      description: Endpoint for authenticated users to update their profile information.
      security:
        - BearerAuth: []
      requestBody:
        description: User profile information to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
                lastName:
                  type: string
                  description: The user's last name
                dateOfBirth:
                  type: string
                  format: date
                  description: The user's date of birth in format YYYY-MM-DD
                email:
                  type: string
                  format: email
                  description: The user's email address
                phoneNumber:
                  type: string
                  description: The user's phone number
      responses:
        '200':
          description: Profile successfully updated
        '400':
          description: Bad Request
        '401':
          description: Missing credentials
        '500':
          description: Internal error


  /login:
    post:
      summary: Authenticate a user
      description: Log in a user with their username and password to receive an auth token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The user's username
                password:
                  type: string
                  format: password
                  description: The user's password
              required:
                - username
                - password
      responses:
        '200':
          $ref: '#/components/responses/AuthSuccess'
        '400':
          description: Login and Password must be filled in
        '401':
          description: Invalid username or password
        '500':
          description: Internal error

  /profile:
    get:
      summary: Retrieve user profile
      description: Get the current user's profile data.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  dateOfBirth:
                    type: string
                    format: date
                  email:
                    type: string
                    format: email
                  phoneNumber:
                    type: string
        '401':
          description: Missing credentials
        '500':
          description: Internal error
  
  /post:
    get:
      summary: Get post by id
      description: Get post data by post id
      security:
        - BearerAuth: []
      requestBody:
        description: Post id to get post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                  description: Post id
      responses:
        '200':
          $ref: '#/components/responses/PostDataResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
    post:
      summary: Add post
      description: Add post
      security:
        - BearerAuth: []
      requestBody:
        description: Information for post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items: 
                    type: string
                isPrivate:
                  type: boolean
      responses:
        '200':
          $ref: '#/components/responses/PostDataResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
    put:
      summary: Update post
      description: Update post
      security:
        - BearerAuth: []
      requestBody:
        description: Information for post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: integer
                userId:
                  type: integer
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items: 
                    type: string
                isPrivate:
                  type: boolean
      responses:
        '200':
          $ref: '#/components/responses/PostDataResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
    delete:
      summary: Delete post
      description: Delete post with provided post id
      security:
        - BearerAuth: []
      requestBody:
        description: Post id that need to delete
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: integer
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
  /posts/all:
    get:
      summary: Get posts page
      description: Get posts page providing limit and offset
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                limit:
                  type: integer
                offset:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/PostDataListResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
  /posts/user:
    get:
      summary: Get user posts page
      description: Get user posts page providing limit and offset
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                limit:
                  type: integer
                offset:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/PostDataListResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
  /comments/add:
    post:
      summary: Add user comment
      description: Adding user comment to post with provided comment description
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                postId:
                  type: integer
                description:
                  type: string
      responses:
        '200':
          description: '#components/responses/CommentDataResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error   
  /comments/get:
    get:
      summary: Get comments to post
      description: Get page of comments to post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: Integer
                userId:
                  type: Integer
                limit:
                  type: Integer
                offset:
                  type: Integer
      responses:
        '200':
          description: '#components/responses/CommentDataListResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
  /like:
    post:
      summary: Like post
      description: Like post 
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: Integer
                userId:
                  type: Integer
      responses:
        '200': 
          description: '#components/responses/StatisticsResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
  /view:
    post:
      summary: View post
      description: View post 
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: Integer
                userId:
                  type: Integer
      responses:
        '200': 
          description: '#components/responses/StatisticsResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized access
        '500':
          description: Internal Error
components:
  schemas:
    PostData:
      type: object
      properties:
        postId:
          type: integer
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isPrivate:
          type: boolean
        tags:
          type: array
          items: 
            type: string
        title:
          type: string
        description:
          type: string
    CommentData:
      type: object
      properties:
        postId:
          type: Integer
        userId:
          type: Integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        description:
          type: string
  responses:
    AuthSuccess:
      description: Successful authentification
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
              expiration_date:
                type: string
                format: date-time 
    PostDataResponse:
      description: Post data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostData'
    PostDataListResponse:
      description: List of posts
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PostData'
    CommentDataResponse:
      description: Comment data
      content:
        application/json:
          schema:
            $ref: '#components/schemas/CommentData'
    CommentDataListResponse:
      description: List of comments
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#components/schemas/CommentData'
    StatsticsResponse:
      description: statistics response
      content:
        application/json:
          schema:
            type: object
            properties:
              postId:
                type: Integer
              userId:
                type: Integer
              updatedAt:
                type: string
                format: date-time
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT